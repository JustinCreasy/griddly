@model GriddlyResultPage

@{
    GriddlySettings settings = (GriddlySettings)ViewBag.settings;

    settings.Columns.RemoveAll(x => x.IsExportOnly);

    bool simple = ViewBag.isSimpleGriddly == true;
    bool isFirstRender = ViewContext.Controller.ControllerContext.IsChildAction || simple;
}
@if (isFirstRender)
{
    string[] sortDefaults = settings.Columns.Where(x => !string.IsNullOrWhiteSpace(x.DefaultSort)).Select(x => x.SortField + " " + x.DefaultSort).ToArray();

@:<div class="griddly @settings.ClassName" data-role="griddly"
@:     data-griddly-url="@Url.Current()"
@:     data-griddly-count="@Model.Total"
@:     data-griddly-pagesize="@(settings.PageSize ?? Model.PageSize)"
@:     @Html.AttributeNullable("data-griddly-onrefresh", settings.OnClientRefresh)
@:     @Html.AttributeNullable("data-griddly-rowclickmodal", settings.RowClickModal)
@:     @Html.AttributeIf("data-griddly-sortdefaults", sortDefaults != null && sortDefaults.Any(), @<text>@Json.Encode(sortDefaults)</text>)>
    if (settings.Buttons.Any())
    { 
    <div class="buttons">
        @Html.Partial(GriddlySettings.ButtonListTemplate, new ViewDataDictionary(settings.Buttons)
            {
                { "ResolveContext", ViewContext.ParentActionViewContext.ViewData.Model }  
            })
    </div>
    }
    if (settings.BeforeTemplate != null)
    {
        @settings.BeforeTemplate(null)
    }
@:<table class="@settings.ClassName">
    <thead>
        @if (!string.IsNullOrWhiteSpace(settings.Title))
        {
        <tr class="header">
            <td colspan="@settings.Columns.Count">
                @settings.Title
            </td>
        </tr>
        }
        @if (settings.HasFilterTemplate && !settings.FilterInline)
        {
        <tr class="filters">
            <td colspan="@settings.Columns.Count">
                <form class="filterForm novalidate">
                    @settings.RenderFilterTemplate(null)
                    <div class="errors"></div>
                    <div class="buttons">
                        <input type="submit" value="Search"> <a class="grid_searchreset" href="javascript:void(0);">Reset</a>
                    </div>
                </form>
            </td>
        </tr> 
        }
        <tr class="columnHeaders">
            @foreach (GriddlyColumn column in settings.Columns)
            {
                bool isSortable = !simple && !string.IsNullOrWhiteSpace(column.SortField);
                <th class="@column.ClassName @(isSortable ? "sortable" : null) @(column is GriddlySelectColumn ? "select" : null) @(!string.IsNullOrWhiteSpace(column.DefaultSort) ? (column.DefaultSort.Equals("DESC", StringComparison.InvariantCultureIgnoreCase) ? "sorted_d" : "sorted_a") : null)" @Html.AttributeNullable("data-griddly-sortfield", simple ? null : column.SortField)>
                    @column.Caption
                    @if (isSortable) {
                    <span class="icon">&nbsp;</span>
                    }
                    else if (column is GriddlySelectColumn)
                    {
                        <i class="icon-check"></i>
                    }
                </th>
            }
        </tr>
        @if (settings.HasFilterTemplate && settings.FilterInline)
        {
        <tr class="filters inline">
            @settings.RenderFilterTemplate(null)
        </tr> 
        }
    </thead>
}
    <tbody class="data">
        @foreach (object row in Model.Data)
        { 
            <tr @Html.AttributeIf("data-griddly-url", settings.HasRowClickUrl, @<text>@settings.RenderRowClickUrl(row)</text>) @Html.AttributeIf("class", settings.HasRowClass, @<text>@settings.RenderRowClass(row)</text>)>
            @foreach (GriddlyColumn column in settings.Columns)
            {
                string currentSort = Model.SortFields != null ? Model.SortFields.FirstOrDefault(x => x == column.SortField || x.StartsWith(column.SortField + " ")) : null;
                <td class="@column.ClassName @(currentSort != null ? (currentSort.EndsWith(" DESC", StringComparison.InvariantCultureIgnoreCase) ? "sorted_d" : "sorted_a") : null)">@column.RenderCell(row)</td>
            }
            </tr>
        }        
    </tbody>
@if (isFirstRender)
{
    <tfoot>
        <tr>
            <td colspan="@settings.Columns.Count" class="last">
            @if (settings.FooterTemplate == null || simple)
            {
                <span class="griddly-summary">Records @(Model.PageNumber * Model.PageSize + (Model.Total > 0 ? 1 : 0)) through @(Model.PageNumber * Model.PageSize + Model.Count) of @Model.Total</span>
                <span class="griddly-pager" style="@(Model.Total <= Model.PageSize ? "display:none" : null)">
                    <a class="prev" href="javascript:void(0)" style="@(Model.PageNumber == 0 ? "display:none" : null)">&lt;&lt; Previous</a>Page
                    <input type="text" class="pageNumber" value="@(Model.PageNumber + 1)"> of <span class="pageCount">@(Model.Total / Model.PageSize + 1)</span>
                    <a class="next" style="@(Model.Total < Model.PageSize ? "display:none" : null)" href="javascript:void(0)">Next &gt;&gt;</a>
                </span>
            }
            else
            {
                @settings.FooterTemplate(Model) 
            }
            </td>
        </tr>
    </tfoot>    
@:</table>
    if (settings.AfterTemplate != null)
    {
        @settings.AfterTemplate(null)
    }
@:</div>    
}
