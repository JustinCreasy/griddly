@*
 * Griddly renderer
 * http://griddly.com
 * Copyright 2013-2014 Chris Hynes and Data Research Group, Inc.
 * Licensed under MIT (https://github.com/programcsharp/griddly/blob/master/LICENSE)
 *
 * WARNING: Don't edit this file -- it'll be overwitten when you upgrade.
 *          Use the static properties on GriddlySettings to make config changes.
 *
 *@

@model GriddlyResultPage

@{
    GriddlySettings settings = (GriddlySettings)ViewBag.settings;

    settings.Columns.RemoveAll(x => x.IsExportOnly);

    bool simple = ViewBag.isSimpleGriddly == true;
    bool isFirstRender = ViewContext.Controller.ControllerContext.IsChildAction || simple;
    if (GriddlySettings.BeforeRender != null)
    {
        GriddlySettings.BeforeRender(settings);
    }
}


@if (isFirstRender)
{
    SortField[] defaultSort = settings.GetDefaultSort();

@:<div class="griddly @settings.ClassName" data-role="griddly"
@:     @Html.AttributeNullable("data-griddly-url", !simple ? Url.Current() : null)
@:     data-griddly-count="@Model.Total"
@:     data-griddly-pagesize="@(settings.PageSize ?? Model.PageSize)"
@:     @Html.AttributeNullable("data-griddly-onrefresh", settings.OnClientRefresh)
@:     @Html.AttributeNullable("data-griddly-rowclickmodal", settings.RowClickModal)
@:     @Html.AttributeIf("data-griddly-defaultsort", defaultSort != null && defaultSort.Any(), @<text>@Json.Encode(defaultSort.Select(x => new { Field = x.Field, Direction = x.Direction.ToString() }))</text>)>
    if (settings.Buttons.Any())
    { 
    <div class="buttons">
        @Html.Partial(GriddlySettings.ButtonListTemplate, new ViewDataDictionary(settings.Buttons)
            {
                { "ResolveContext", ViewContext.ParentActionViewContext != null ? ViewContext.ParentActionViewContext.ViewData.Model : null }  
            })
    </div>
    }
    if (settings.BeforeTemplate != null)
    {
        @settings.BeforeTemplate(null)
    }
@:<div class="griddly-scrollable-container">
@:<table class="@settings.TableClassName">
    <colgroup>
        @foreach (GriddlyColumn column in settings.Columns)
        {
            <col @Html.AttributeIf("style",column.Width!=null,"width:"+column.Width) />
        }
    </colgroup>
    <thead>
        @if (!string.IsNullOrWhiteSpace(settings.Title))
        {
        <tr class="header">
            <td colspan="@settings.Columns.Count">@settings.Title</td>
        </tr>
        }
        <tr class="filters" style="@(settings.FilterTemplate == null || !settings.ShowFilterInitially ? "display:none" : null)">
            <td colspan="@settings.Columns.Count">
                <form class="filterForm novalidate">
                    @if (settings.FilterTemplate != null)
                    {
                        @settings.FilterTemplate(null)
                    }
                    <div class="errors"></div>
                    <div class="buttons">
                        <input type="hidden" name="query" value="true" />
                        <input type="submit" value="Search"> <a class="grid_searchreset" href="javascript:void(0);">Reset</a>
                    </div>
                </form>
            </td>
        </tr> 
        <tr class="columnHeaders">
            @foreach (GriddlyColumn column in settings.Columns)
            {
                bool isSortable = !simple && !string.IsNullOrWhiteSpace(column.SortField);
                <th class="@column.ClassName @(isSortable ? "sortable" : null) @(column is GriddlySelectColumn ? "select" : null) @(column.DefaultSort != null ? (column.DefaultSort == SortDirection.Descending ? "sorted_d" : "sorted_a") : null)" @Html.AttributeNullable("data-griddly-sortfield", simple ? null : column.SortField)>
                    @column.Caption
                    @if (isSortable) {
                    <span class="icon">&nbsp;</span>
                    }
                    else if (column is GriddlySelectColumn)
                    {
                        <i class="glyphicon glyphicon-check"></i>
                    }
                </th>
            }
        </tr>
        @if (settings.InlineFilterTemplate != null)
        {
        <tr class="filters inline">@settings.InlineFilterTemplate(null)</tr> 
        }
    </thead>
}
    <tbody class="data">
        @foreach (object row in Model.Data)
        { 
            <tr @Html.AttributeIf("data-griddly-url", settings.HasRowClickUrl, @<text>@settings.RenderRowClickUrl(row)</text>)
                @Html.AttributeIf("class", settings.HasRowClass, @<text>@settings.RenderRowClass(row)</text>)
                @Html.AttributeIf("data-id", TryEval(row,settings.IdProperty)!=null, TryEval(row,settings.IdProperty))
                >
            @foreach (GriddlyColumn column in settings.Columns)
            {
                <td class="@column.ClassName @(column.DefaultSort != null ? (column.DefaultSort == SortDirection.Descending ? "sorted_d" : "sorted_a") : null)">@column.RenderCell(row)</td>
            }
            </tr>
        }        
    </tbody>
@if (isFirstRender)
{
@:</table>
@:</div>
            <div class="griddly-footer">
            @if (settings.FooterTemplate == null || simple)
            {
                <span class="griddly-summary">Records @(Model.PageNumber * Model.PageSize + (Model.Total > 0 ? 1 : 0)) through @(Model.PageNumber * Model.PageSize + Model.Count) of @Model.Total</span>
                <span class="griddly-pager" style="@(Model.Total <= Model.PageSize ? "display:none" : null)">
                    <a class="prev" href="javascript:void(0)" style="@(Model.PageNumber == 0 ? "display:none" : null)">&lt;&lt; Previous</a>Page
                    <input type="text" class="pageNumber" value="@(Model.Total > 0 ? (Model.PageNumber + 1) : 0)"> of <span class="pageCount">@(Model.Total > 0 ? (Model.Total / Model.PageSize + 1) : 0)</span>
                    <a class="next" style="@(Model.Total < Model.PageSize ? "display:none" : null)" href="javascript:void(0)">Next &gt;&gt;</a>
                </span>
            }
            else
            {
                @settings.FooterTemplate(Model) 
            }
            </div>

    if (settings.AfterTemplate != null)
    {
        @settings.AfterTemplate(null)
    }
@:</div>    
}
@functions
{
    object TryEval(object obj, string prop)
    {
        try
        {
            return DataBinder.Eval(obj, prop);
        }
        catch { return null; }
    }
}
