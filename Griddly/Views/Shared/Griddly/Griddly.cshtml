@*
    * Griddly renderer
    * http://griddly.com
    * Copyright 2013-2014 Chris Hynes and Data Research Group, Inc.
    * Licensed under MIT (https://github.com/programcsharp/griddly/blob/master/LICENSE)
    *
    * WARNING: Don't edit this file -- it'll be overwitten when you upgrade.
    *          Use the static properties on GriddlySettings to make config changes.
    *
*@

@model GriddlyResultPage

@{
    GriddlySettings settings = (GriddlySettings)ViewBag.settings;

    settings.Columns.RemoveAll(x => x.IsExportOnly);

    bool simple = ViewBag.isSimpleGriddly == true;
    bool isFirstRender = ViewContext.Controller.ControllerContext.IsChildAction || simple;

    if (isFirstRender)
    {
        if (settings.HasInlineFilter && settings.InlineFilterTemplate == null && settings.Columns.Any(x => x.Filter != null))
        {
            settings.InlineFilterTemplate = (x) => RenderInlineFilters(x);
        }

        if (settings.FilterTemplate == null && settings.Filters.Any())
        {
            settings.FilterTemplate = (x) => RenderFilters(x);
        }

        if (GriddlySettings.BeforeRender != null)
        {
            GriddlySettings.BeforeRender(settings);
        }
    }

    if (Model.PopulateSummaryValues != null)
    {
        Model.PopulateSummaryValues(settings);
    }
}

@if (isFirstRender)
{
    SortField[] defaultSort = settings.DefaultSort;

    @:<div class="griddly @settings.ClassName" data-role="griddly"
                                            @: @Html.AttributeNullable("data-griddly-url", !simple ? Url.Current() : null)
                                            @: data-griddly-count="@Model.Total"
                                            @: data-griddly-pagesize="@(settings.PageSize ?? Model.PageSize)"
                                            @: @Html.AttributeNullable("data-griddly-onrefresh", settings.OnClientRefresh)
                                            @: @Html.AttributeNullable("data-griddly-rowclickmodal", settings.RowClickModal)
                                            @: data-griddly-defaultrowids="@Json.Encode(settings.DefaultRowIds != null ? settings.DefaultRowIds : new string[] { "value" })"
                                            @: @Html.AttributeIf("data-griddly-defaultsort", defaultSort != null && defaultSort.Any(), Html.AttributeEncode(Json.Encode(defaultSort.Select(x => new { Field = x.Field, Direction = x.Direction.ToString() }))))>
    if (settings.Buttons.Any())
    {
        <div class="buttons">
            @Html.Partial(GriddlySettings.ButtonListTemplate, new ViewDataDictionary(settings.Buttons)
            {
                { "ResolveContext", ViewContext.ParentActionViewContext != null ? ViewContext.ParentActionViewContext.ViewData.Model : null }
            })
        </div>
    }
    if (settings.BeforeTemplate != null)
    {
        @settings.BeforeTemplate(null)
    }
    @:<div class="griddly-scrollable-container">
        @:<table class="@settings.TableClassName">
            <colgroup>
                @foreach (GriddlyColumn column in settings.Columns)
                {
                    <col @Html.AttributeIf("style", column.Width != null, "width:" + column.Width) />
                }
            </colgroup>
    <thead>
        @if (!string.IsNullOrWhiteSpace(settings.Title))
        {
            <tr class="header">
                <td colspan="@settings.Columns.Count">@settings.Title</td>
            </tr>
        }

        @if (settings.ShowRowSelectCount)
        {
            <tr class="griddly-selection header" style="display:none;">
                <td colspan="@settings.Columns.Count">
                    <span><label class="griddly-selection-count">0</label> rows selected</span>
                    <span><a class="griddly-selection-clear" href="javascript:;">Clear</a></span>
                </td>
            </tr>
        }

        <tr class="griddly-filters" style="@(settings.FilterTemplate == null || !settings.ShowFilterInitially ? "display:none" : null)">
            <td colspan="@settings.Columns.Count">
                <form class="filterForm novalidate">
                    @if (settings.FilterTemplate != null)
                    {
                        @settings.FilterTemplate(settings)
                    }
                    <div class="errors"></div>
                    <div class="buttons">
                        <input type="hidden" name="query" value="true" />
                        <input type="submit" value="Search"> <a class="grid_searchreset" href="javascript:void(0);">Reset</a>
                    </div>
                </form>
            </td>
        </tr>
        <tr class="columnHeaders">
            @foreach (GriddlyColumn column in settings.Columns)
            {
                bool isSortable = !simple && !string.IsNullOrWhiteSpace(column.ExpressionString);
                <th class="@column.ClassName @(isSortable ? "sortable" : null) @(column is GriddlySelectColumn ? "select" : null) @(column.DefaultSort != null ? (column.DefaultSort == SortDirection.Descending ? "sorted_d" : "sorted_a") : null)" @Html.AttributeNullable("data-griddly-sortfield", simple ? null : column.ExpressionString)>
                    @if (isSortable)
                    {
                        <text>@column.Caption<span class="icon">&nbsp;</span></text>
                    }
                    else if (column is GriddlySelectColumn)
                    {
                        <i class="glyphicon glyphicon-check"></i>
                    }
                    else
                    {
                        @column.Caption
                    }
                </th>
            }
        </tr>
        @if (settings.InlineFilterTemplate != null && settings.HasInlineFilter)
        {
            <tr class="griddly-filters griddly-filters-inline">@settings.InlineFilterTemplate(settings)</tr>
        }
    </thead>
}
<tbody class="data">
    @foreach (object row in Model.Data)
    {
        <tr @Html.AttributeIf("data-griddly-url", settings.RowClickUrl != null, @<text> @settings.RowClickUrl(row) </text> )
            @Html.AttributeIf("class", settings.RowClass != null, @<text> @settings.RowClass(row) </text> )
            @Html.AttributeNullable("data-id", TryEval(row, settings.IdProperty))
            @foreach (var x in settings.RowIds)
            {
                @: data-rowid-@(x.Key)="@(x.Value(row))"
            }
            data-rowkey="@("_" + string.Join("_", settings.RowIds.Select(x => { var val = x.Value(row); return val == null ? "" : val.ToString(); }).ToArray()))">
            @foreach (GriddlyColumn column in settings.Columns)
            {
                <td class="@column.RenderClassName(row, Model)">@column.RenderCell(row, settings)</td>
            }
        </tr>
    }
</tbody>
@if (settings.Columns.Any(x => x.SummaryFunction != null || x.SummaryValue != null))
{
    <tfoot>
        <tr>
            @foreach (GriddlyColumn column in settings.Columns)
            {
                <td>@column.RenderValue(column.SummaryValue)</td>
            }
        </tr>
    </tfoot>
}
@if (isFirstRender)
{
    @:</table>
    @:</div>
    <div class="griddly-footer">
        @if (settings.FooterTemplate == null || simple)
        {
            <span class="griddly-summary">Records @(Model.PageNumber * Model.PageSize + (Model.Total > 0 ? 1 : 0)) through @(Model.PageNumber * Model.PageSize + Model.Count) of @Model.Total</span>
            <span class="griddly-pager" style="@(Model.Total <= Model.PageSize ? "display:none" : null)">
                <a class="prev" href="javascript:void(0)" style="@(Model.PageNumber == 0 ? "display:none" : null)">&lt;&lt; Previous</a>Page
                <input type="text" class="pageNumber" value="@(Model.Total > 0 ? (Model.PageNumber + 1) : 0)"> of <span class="pageCount">@(Model.Total > 0 ? (Model.Total / Model.PageSize + 1) : 0)</span>
                <a class="next" style="@(Model.Total < Model.PageSize ? "display:none" : null)" href="javascript:void(0)">Next &gt;&gt;</a>
            </span>
        }
        else
        {
            @settings.FooterTemplate(Model)
        }
    </div>

    if (settings.AfterTemplate != null)
    {
        @settings.AfterTemplate(null)
    }
    @:</div>
}

@functions
{
    string TryEval(object obj, string prop)
    {
        try
        {
            return DataBinder.Eval(obj, prop).ToString();
        }
        catch { return null; }
    }
}

@helper RenderInlineFilters(GriddlySettings settings)
{
    for (int i = 0; i < settings.Columns.Count; i++)
    {
        GriddlyColumn column = settings.Columns[i];

        <td class="@column.ClassName @(column.DefaultSort != null ? (column.DefaultSort == SortDirection.Descending ? "sorted_d" : "sorted_a") : null)">
            @if (column.Filter != null)
            {
                GriddlyFilter filter = column.Filter;
                GriddlyFilterBox filterBox = filter as GriddlyFilterBox;
                GriddlyFilterRange filterRange = filter as GriddlyFilterRange;
                GriddlyFilterList filterList = filter as GriddlyFilterList;

                <div class="btn-group griddly-filter @(filterBox != null ? "griddly-filter-box" : null) @(filterRange != null ? "griddly-filter-range" : null) @(filterList != null ? "griddly-filter-list" : null)"
                     data-filter-name="@filter.Caption" data-filter-name-plural="@filter.CaptionPlural"
                     data-filter-datatype="@filter.DataType.ToString()"
                     @Html.AttributeIf("data-griddly-filter-ismultiple", filterList != null, x => filterList.IsMultiple.ToString().ToLower())
                     @Html.AttributeIf("data-griddly-filter-isnoneall", filterList != null, x => filterList.IsNoneAll.ToString().ToLower())
                     @Html.AttributeIf("data-griddly-filter-displayitemcount", filterList != null, x => filterList.DisplayItemCount)>
                    @{
                        object defaultValue = this.GetGriddlyDefault(filter.Field);
                        object defaultValueEnd = filterRange != null ? this.GetGriddlyDefault(filterRange.FieldEnd) : null;
                    }
                    <a class="btn btn-link btn-xs filter-trigger">
                        <span class="griddly-filter-display">
                            @if (filterBox != null)
                            {
                                if (defaultValue != null)
                                {
                                    if (filter.DataType == FilterDataType.String)
                                    {
                                        <text>Contains "@filter.GetFormattedValue(defaultValue)"</text>
                                    }
                                    else
                                    {
                                        @filter.GetFormattedValue(defaultValue)
                                    }
                                }
                                else
                                {
                                    <text>Any @filter.Caption</text>
                                }
                            }
                            else if (filterRange != null)
                            {
                                if (defaultValue != null && defaultValueEnd != null)
                                {
                                    <text>@filter.GetFormattedValue(defaultValue) - @filter.GetFormattedValue(defaultValueEnd)</text>
                                }
                                else if (defaultValue != null)
                                {
                                    <text>@(filter.DataType == FilterDataType.Date ? "After" : ">=") @filter.GetFormattedValue(defaultValue)</text>
                                }
                                else if (defaultValueEnd != null)
                                {
                                    <text>@(filter.DataType == FilterDataType.Date ? "Before" : "<=") @filter.GetFormattedValue(defaultValueEnd)</text>
                                }
                                else
                                {
                                    <text>All @filter.CaptionPlural</text>
                                }
                            }
                            else if (filterList != null)
                            {
                                filterList.SetSelectedItems(defaultValue);
                                
                                int allCount = filterList.SelectableItems.Count;
                                int selectedCount = filterList.SelectableItems.Count(x => x.Selected);
                                                                
                                if (selectedCount == allCount || (selectedCount == 0 && filterList.IsNoneAll))
                                {
                                    <text>@(allCount == 2 ? "Both " : "All ") @filter.CaptionPlural</text>
                                }
                                else if (selectedCount > filterList.DisplayItemCount)
                                {
                                    <text>@(selectedCount) @filter.CaptionPlural</text>
                                }
                                else if (selectedCount > 0 && selectedCount <= filterList.DisplayItemCount)
                                {
                                    @(string.Join(", ", filterList.SelectableItems.Where(x => x.Selected).Take(Math.Min(selectedCount, filterList.DisplayItemCount)).Select(x => x.Text)))
                                }
                                else
                                {
                                    <text>No @filter.CaptionPlural</text>
                                }
                            }
                        </span>
                        <span class="caret"></span>
                    </a>
                    <div class="filter-content">
                        @if (filterBox != null)
                        {
                            <div class="input-group input-group-sm">
                                @if (filter.DataType == FilterDataType.Currency)
                                {
                                    <span class="input-group-addon">$</span>
                                }
                                else if (filter.DataType == FilterDataType.Date)
                                {
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                }
                                <input class="form-control" name="@filter.Field" type="text" value="@filter.GetEditValue(defaultValue)" />
                                @*@if (filter.DataType == FilterDataType.Percent)
                                    {
                                        <span class="input-group-addon">%</span>
                                    }*@
                                <span class="input-group-btn">
                                    <a class="btn btn-default griddly-filter-clear"><i class="glyphicon glyphicon-remove"></i></a>
                                </span>
                            </div>
                        }
                        else if (filterRange != null)
                        {
                            <div class="input-group input-group-sm">
                                @if (filter.DataType == FilterDataType.Currency)
                                {
                                    <span class="input-group-addon">$</span>
                                }
                                else if (filter.DataType == FilterDataType.Date)
                                {
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                }
                                <input class="form-control" name="@filter.Field" type="text" value="@filter.GetEditValue(defaultValue)" />
                                @*@if (filter.DataType == FilterDataType.Percent)
                                    {
                                        <span class="input-group-addon">%</span>
                                    }*@
                                <span class="input-group-btn">
                                    <a class="btn btn-default griddly-filter-clear"><i class="glyphicon glyphicon-remove"></i></a>
                                </span>
                            </div>
                            <div style="text-align:center">to</div>
                            <div class="input-group input-group-sm">
                                @if (filter.DataType == FilterDataType.Currency)
                                {
                                    <span class="input-group-addon">$</span>
                                }
                                else if (filter.DataType == FilterDataType.Date)
                                {
                                    <span class="input-group-addon"><i class="glyphicon glyphicon-calendar"></i></span>
                                }
                                <input class="form-control" name="@filterRange.FieldEnd" type="text" value="@filter.GetEditValue(defaultValueEnd)" />
                                @*@if (filter.DataType == FilterDataType.Percent)
                                    {
                                        <span class="input-group-addon">%</span>
                                    }*@
                                <span class="input-group-btn">
                                    <a class="btn btn-default griddly-filter-clear"><i class="glyphicon glyphicon-remove"></i></a>
                                </span>
                            </div>
                        }
                        else if (filterList != null)
                        {
                            if (filterList.IsMultiple)
                            {
                                <div class="input-group griddly-filter-buttons">
                                    <span class="input-group-btn">
                                        <a class="btn btn-default griddly-select-all"><i class="glyphicon glyphicon-check"></i> Select All</a>
                                    </span>
                                    <span class="input-group-btn">
                                        <a class="btn btn-default  griddly-clear"><i class="glyphicon glyphicon-ban-circle"></i> Clear</a>
                                    </span>
                                </div>
                            }
                            <ul class="dropdown-menu" role="menu">
                                @foreach (SelectListItem item in filterList.Items)
                                {
                                    SelectListItemGroup group = item as SelectListItemGroup;

                                    if (group != null)
                                    {
                                        <li class="griddly-list-group-header"><b>@group.Text</b></li>
                                        foreach (SelectListItem childItem in group.Items)
                                        {
                                            @RenderListItem(filterList, childItem, true)
                                        }
                                    }
                                    else
                                    {
                                        @RenderListItem(filterList, item)
                                    }
                                }
                            </ul>
                        }
                    </div>
                </div>
            }
        </td>
    }
}

@helper RenderListItem(GriddlyFilterList filter, SelectListItem item, bool isGrouped = false)
{
    <li class="@(item.Selected ? "griddly-filter-selected" : null) @(isGrouped ? "griddly-list-group" : null)">
        <a>
            <input name="@filter.Field" type="@(filter.IsMultiple ? "checkbox" : "radio")" checked="@(item.Selected)" value="@item.Value" />
            <i class="glyphicon glyphicon-@(filter.IsMultiple ? "ok" : "record") griddly-filter-selected-indicator"></i>
            @item.Text
        </a>
    </li>
}

@helper RenderFilters(GriddlySettings settings)
{

}